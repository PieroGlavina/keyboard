/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, {useEffect, useRef, useState} from 'react'
import { useGLTF } from '@react-three/drei'
import scene from '../../public/assets/3D/plate.glb'
import {useGSAP} from "@gsap/react";
import gsap from "gsap";


const Plate = ({currentPlate, toAnimate, isCollapsed, isVisible, ...props}) => {

    const { nodes, materials } = useGLTF(scene)
    const PlateRef = useRef();

    useGSAP(() => {
        if(!PlateRef.current) return;

        if(toAnimate) { //going down
            PlateRef.current.visible = true;

            gsap.fromTo(PlateRef.current.position, {y: 0.5}, {
                y: 0.1,
                duration: 1,
                ease: "easeOut",
            });

        }else{  //going up
            gsap.fromTo(PlateRef.current.position, {y: 0.1}, {
                y: 0.5,
                duration: 1,
                ease: "easeOut",
                onComplete: () => {
                    PlateRef.current.visible = false;
                }
            });
        }

    }, [toAnimate]);



    useGSAP(() => {
        if(!PlateRef.current) return;
        //gsap.fromTo(PlateRef.current.position,  {y: 0.1}, {y: 0.01, duration: 1, ease: "easeOut"});
    }, [isCollapsed]);



    useEffect(() => {
        materials["PlateMaterial"].color.set(currentPlate.color);
    }, [currentPlate]);

    return (
        <group ref={PlateRef} {...props} dispose={null}>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Plate.geometry}
                material={materials.PlateMaterial}
                position={[0, 0.001, 0]}
            />
        </group>
    )
}

export default Plate;

